name: CI/CD for API Platform and VueJS

on:
    push:
        branches:
            - main
            - dev
        tags:
            - stage-*


jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Create Env file
                run: |
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./api/.env
                    echo "APP_ENV=\"${{secrets.APP_ENV}}\"" >> ./api/.env
                    echo "APP_SECRET=\"${{secrets.APP_SECRET}}\"" >> ./api/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "CORS_ALLOW_ORIGIN=\"${{secrets.CORS_ALLOW_ORIGIN}}\"" >> ./api/.env
                    echo "DATABASE_URL=\"${{secrets.DATABASE_URL}}\"" >> ./api/.env
                    echo "JWT_PASSPHRASE=\"${{secrets.JWT_PASSPHRASE}}\"" >> ./api/.env
                    echo "JWT_PUBLIC_KEY=\"${{secrets.JWT_PUBLIC_KEY}}\"" >> ./api/.env
                    echo "JWT_SECRET_KEY=\"${{secrets.JWT_SECRET_KEY}}\"" >> ./api/.env
                    echo "MAILER_DSN=\"${{secrets.MAILER_DSN}}\"" >> ./api/.env
                    echo "MAILER_FROM=\"${{secrets.MAILER_FROM}}\"" >> ./api/.env
                    echo "MAILER_PASSWORD=\"${{secrets.MAILER_PASSWORD}}\"" >> ./api/.env
                    echo "MAILER_PORT=\"${{secrets.MAILER_PORT}}\"" >> ./api/.env
                    echo "MAILER_SERVER=\"${{secrets.MAILER_SERVER}}\"" >> ./api/.env
                    echo "MERCURE_JWT_SECRET=\"${{secrets.MERCURE_JWT_SECRET}}\"" >> ./api/.env
                    echo "MERCURE_PUBLIC_URL=\"${{secrets.MERCURE_PUBLIC_URL}}\"" >> ./api/.env
                    echo "MERCURE_URL=\"${{secrets.MERCURE_URL}}\"" >> ./api/.env
                    echo "TRUSTED_HOSTS=\"${{secrets.TRUSTED_HOSTS}}\"" >> ./api/.env
                    echo "TRUSTED_PROXIES=\"${{secrets.TRUSTED_PROXIES}}\"" >> ./api/.env
                    echo "SERVER_NAME=\"${{secrets.SERVER_NAME}}\"" >> ./api/.env
                    echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> ./api/.env
                    echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> ./api/.env
                    echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> ./api/.env
                    echo "STRIPE_KEY=${{secrets.STRIPE_KEY}}" >> ./api/.env
                    echo "CADDY_MERCURE_JWT_SECRET=${{secrets.CADDY_MERCURE_JWT_SECRET}}" >> ./api/.env
                    echo "VITE_BACKEND_URL=\"${{secrets.VITE_BACKEND_URL}}\"" >> ./front/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./front/.env

            -   name: Set up Node.js
                uses: actions/setup-node@v3
                with:
                    node-version: 18

            -   name: Build Backend
                working-directory: api/
                run: |
                    docker-compose build --no-cache

            -   name: Start Backend
                run: |
                    docker-compose up -d

            -   name: Login to Docker Hub
                uses: docker/login-action@v2
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            -   name: Push to Docker Hub
                uses: docker/build-push-action@v4
                with:
                    context: api
                    push: true
                    tags: tufeng/fight_club:latest

    tests:
        name: Tests
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout
                uses: actions/checkout@v3
            -   name: Create Env file
                run: |
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./api/.env
                    echo "APP_ENV=\"${{secrets.APP_ENV}}\"" >> ./api/.env
                    echo "APP_SECRET=\"${{secrets.APP_SECRET}}\"" >> ./api/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "CORS_ALLOW_ORIGIN=\"${{secrets.CORS_ALLOW_ORIGIN}}\"" >> ./api/.env
                    echo "DATABASE_URL=\"${{secrets.DATABASE_URL}}\"" >> ./api/.env
                    echo "JWT_PASSPHRASE=\"${{secrets.JWT_PASSPHRASE}}\"" >> ./api/.env
                    echo "JWT_PUBLIC_KEY=\"${{secrets.JWT_PUBLIC_KEY}}\"" >> ./api/.env
                    echo "JWT_SECRET_KEY=\"${{secrets.JWT_SECRET_KEY}}\"" >> ./api/.env
                    echo "MAILER_DSN=\"${{secrets.MAILER_DSN}}\"" >> ./api/.env
                    echo "MAILER_FROM=\"${{secrets.MAILER_FROM}}\"" >> ./api/.env
                    echo "MAILER_PASSWORD=\"${{secrets.MAILER_PASSWORD}}\"" >> ./api/.env
                    echo "MAILER_PORT=\"${{secrets.MAILER_PORT}}\"" >> ./api/.env
                    echo "MAILER_SERVER=\"${{secrets.MAILER_SERVER}}\"" >> ./api/.env
                    echo "MERCURE_JWT_SECRET=\"${{secrets.MERCURE_JWT_SECRET}}\"" >> ./api/.env
                    echo "MERCURE_PUBLIC_URL=\"${{secrets.MERCURE_PUBLIC_URL}}\"" >> ./api/.env
                    echo "MERCURE_URL=\"${{secrets.MERCURE_URL}}\"" >> ./api/.env
                    echo "TRUSTED_HOSTS=\"${{secrets.TRUSTED_HOSTS}}\"" >> ./api/.env
                    echo "TRUSTED_PROXIES=\"${{secrets.TRUSTED_PROXIES}}\"" >> ./api/.env
                    echo "SERVER_NAME=\"${{secrets.SERVER_NAME}}\"" >> ./api/.env
                    echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> ./api/.env
                    echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> ./api/.env
                    echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> ./api/.env
                    echo "STRIPE_KEY=${{secrets.STRIPE_KEY}}" >> ./api/.env
                    echo "JWT_TOKEN_TTL=5000" >> ./api/.env
                    echo "CADDY_MERCURE_JWT_SECRET=${{secrets.CADDY_MERCURE_JWT_SECRET}}" >> ./api/.env
                    echo "VITE_BACKEND_URL=\"${{secrets.VITE_BACKEND_URL}}\"" >> ./front/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./front/.env
            -   name: Pull images
                run: docker compose pull --ignore-pull-failures || true
            -   name: Start services
                run: docker compose up --build -d
            -   name: Wait for services
                run: |
                    while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
                      case $status in
                        starting) sleep 1;;
                        healthy) exit 0;;
                        unhealthy)
                          docker compose ps
                          docker compose logs
                          exit 1
                        ;;
                      esac
                    done
                    exit 1
            -   name: Check HTTP reachability
                run: curl -v -o /dev/null http://localhost
            -   name: Check API reachability
                run: curl -vk -o /dev/null https://localhost
            -   name: Create test database
                run: |
                    docker compose exec -T php bin/console -e test doctrine:database:create
                    docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
            -   name: Newman apk
                run: docker compose exec php apk add npm
            -   name: Newman install
                run: docker compose exec php npm install -g newman
            -   name: jwt key
                run: docker compose exec -T php mv ./config/jwt/private_test.pem ./config/jwt/private.pem && docker compose exec -T php mv ./config/jwt/public_test.pem ./config/jwt/public.pem
            -   name: generate users
                run: docker compose exec php bin/console test:generate-users
            -   name: Newman test
                run: docker compose exec php newman run ./postman/postman_collection.json -e ./postman/postman_environment.json -k
            -   name: Doctrine Schema Validator
                run: docker compose exec -T php bin/console doctrine:schema:validate --skip-sync

    deploy-backend:
        needs:
            - build
            - tests
        name: Deploy Backend
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Create Env file
                run: |
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./api/.env
                    echo "APP_ENV=\"${{secrets.APP_ENV}}\"" >> ./api/.env
                    echo "APP_SECRET=\"${{secrets.APP_SECRET}}\"" >> ./api/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "CORS_ALLOW_ORIGIN=\"${{secrets.CORS_ALLOW_ORIGIN}}\"" >> ./api/.env
                    echo "DATABASE_URL=\"${{secrets.DATABASE_URL}}\"" >> ./api/.env
                    echo "JWT_PASSPHRASE=\"${{secrets.JWT_PASSPHRASE}}\"" >> ./api/.env
                    echo "JWT_PUBLIC_KEY=\"${{secrets.JWT_PUBLIC_KEY}}\"" >> ./api/.env
                    echo "JWT_SECRET_KEY=\"${{secrets.JWT_SECRET_KEY}}\"" >> ./api/.env
                    echo "MAILER_DSN=\"${{secrets.MAILER_DSN}}\"" >> ./api/.env
                    echo "MAILER_FROM=\"${{secrets.MAILER_FROM}}\"" >> ./api/.env
                    echo "MAILER_PASSWORD=\"${{secrets.MAILER_PASSWORD}}\"" >> ./api/.env
                    echo "MAILER_PORT=\"${{secrets.MAILER_PORT}}\"" >> ./api/.env
                    echo "MAILER_SERVER=\"${{secrets.MAILER_SERVER}}\"" >> ./api/.env
                    echo "MERCURE_JWT_SECRET=\"${{secrets.MERCURE_JWT_SECRET}}\"" >> ./api/.env
                    echo "MERCURE_PUBLIC_URL=\"${{secrets.MERCURE_PUBLIC_URL}}\"" >> ./api/.env
                    echo "MERCURE_URL=\"${{secrets.MERCURE_URL}}\"" >> ./api/.env
                    echo "TRUSTED_HOSTS=\"${{secrets.TRUSTED_HOSTS}}\"" >> ./api/.env
                    echo "TRUSTED_PROXIES=\"${{secrets.TRUSTED_PROXIES}}\"" >> ./api/.env
                    echo "SERVER_NAME=\"${{secrets.SERVER_NAME}}\"" >> ./api/.env
                    echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> ./api/.env
                    echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> ./api/.env
                    echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> ./api/.env
                    echo "STRIPE_KEY=${{secrets.STRIPE_KEY}}" >> ./api/.env
                    echo "CADDY_MERCURE_JWT_SECRET=${{secrets.CADDY_MERCURE_JWT_SECRET}}" >> ./api/.env
                    echo "JWT_TOKEN_TTL=5000" >> ./api/.env
                    echo "VITE_BACKEND_URL=\"${{secrets.VITE_BACKEND_URL}}\"" >> ./front/.env
                    echo "BASE_URL=\"${{secrets.BASE_URL}}\"" >> ./front/.env
                    echo "VITE_PORT=\"${{secrets.VITE_PORT}}\"" >> ./front/.env

            -   name: Set up Node.js
                uses: actions/setup-node@v3
                with:
                    node-version: 18

            -   name: executing remote ssh commands using password
                uses: appleboy/ssh-action@v0.1.10
                with:
                    host: ${{ secrets.HOST }}
                    username: ${{ secrets.USERNAME }}
                    password: ${{ secrets.PASSWORD }}
                    port: ${{ secrets.PORT }}
                    script: |
                        ls
                        cd ./${{ secrets.PROJECT_PATH }}
                        docker compose down
                        git pull
                        SERVER_NAME=${{secrets.HOST_URL}} APP_SECRET=${{secrets.APP_SECRET}} POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} CADDY_MERCURE_JWT_SECRET=${{secrets.CADDY_MERCURE_JWT_SECRET}} docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
